import streamlit as st
import whisper
import tempfile
import os
from moviepy.editor import VideoFileClip, AudioFileClip
import plotly.graph_objects as go
from dotenv import load_dotenv
import json
import numpy as np
import soundfile as sf
from scipy import signal
import traceback
import requests
import time
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IO Intelligence –∫–ª–∏–µ–Ω—Ç–∞
IO_API_KEY = "io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjcyMjNkMzhiLWY0NDItNGRlZS1hYmQ0LThlZDM0NjhlZjI5NiIsImV4cCI6NDkwMDY0MTM3M30.Nw5GXlaeH0u9dcTsFgUaPoT-2fYo6UlBoqPeV6TjKqZMyLKLrqZkN2FfIOUo-9kKyT5_mw1EiyFww52LwrtGvQ"
IO_API_BASE = "https://api.intelligence.io.solutions/api/v1"

SAMPLE_RATE = 16000  # Whisper –æ–∂–∏–¥–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 16kHz

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
@st.cache_resource
def load_whisper_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    return whisper.load_model("tiny")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tiny –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã

def process_audio(file_path, status_placeholder):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
    try:
        status_placeholder.text("üéµ –ß—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        file_path = os.path.abspath(os.path.normpath(file_path))
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é soundfile
        try:
            data, samplerate = sf.read(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ soundfile: {str(e)}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ pydub
            from pydub import AudioSegment
            audio = AudioSegment.from_file(file_path)
            samples = audio.get_array_of_samples()
            data = np.array(samples).astype(np.float32) / 32768.0  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            samplerate = audio.frame_rate
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        st.session_state.audio_duration = len(data) / samplerate
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ–Ω–æ
        if len(data.shape) > 1:
            status_placeholder.text("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–µ—Ä–µ–æ –≤ –º–æ–Ω–æ...")
            data = data.mean(axis=1)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ float32
        if data.dtype != np.float32:
            data = data.astype(np.float32)
        
        # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–æ 16kHz –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if samplerate != SAMPLE_RATE:
            status_placeholder.text(f"üéµ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å {samplerate}Hz –¥–æ {SAMPLE_RATE}Hz...")
            number_of_samples = round(len(data) * float(SAMPLE_RATE) / samplerate)
            data = signal.resample(data, number_of_samples)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        if np.abs(data).max() > 1.0:
            status_placeholder.text("üéµ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...")
            data = data / np.abs(data).max()
            
        return data
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {str(e)}")
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise

def extract_audio_from_video(video_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        video_path = os.path.abspath(os.path.normpath(video_path))
        
        video = VideoFileClip(video_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        st.session_state.audio_duration = video.duration
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å ASCII –∏–º–µ–Ω–µ–º
        temp_dir = tempfile.mkdtemp()
        temp_audio_path = os.path.join(temp_dir, 'temp_audio.wav')
        
        try:
            video.audio.write_audiofile(temp_audio_path, fps=SAMPLE_RATE, codec='pcm_s16le')
        finally:
            video.close()
        
        return temp_audio_path
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {str(e)}")
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise

def convert_to_wav(file_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
        file_path = os.path.abspath(os.path.normpath(file_path))
        
        if file_path.endswith('.mp3'):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å ASCII –∏–º–µ–Ω–µ–º
            temp_dir = tempfile.mkdtemp()
            temp_wav = os.path.join(temp_dir, 'temp_audio.wav')
            
            try:
                audio = AudioFileClip(file_path)
                audio.write_audiofile(temp_wav, fps=SAMPLE_RATE, codec='pcm_s16le')
            finally:
                if 'audio' in locals():
                    audio.close()
            
            return temp_wav
        return file_path
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise

def transcribe_audio(audio_path, model, status_placeholder, progress_bar):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        wav_path = convert_to_wav(audio_path)
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
            audio = process_audio(wav_path, status_placeholder)
            
            if audio is None:
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∞—É–¥–∏–æ
            if len(audio) == 0:
                raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
            
            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            audio_duration = len(audio) / SAMPLE_RATE
            estimated_time = audio_duration * 0.5
            
            status_placeholder.text(f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏... (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {estimated_time:.1f} —Å–µ–∫)")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            start_time = time.time()
            result = model.transcribe(
                audio,
                language="ru",
                verbose=True
            )
            
            elapsed_time = time.time() - start_time
            status_placeholder.text(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {elapsed_time:.1f} —Å–µ–∫")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            transcript_data = {
                "full_text": result["text"],
                "segments": []
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            for segment in result["segments"]:
                transcript_data["segments"].append({
                    "text": segment["text"].strip(),
                    "start": float(segment["start"]),
                    "end": float(segment["end"])
                })
            
            return transcript_data
            
        finally:
            if wav_path != audio_path:
                try:
                    os.remove(wav_path)
                except:
                    pass
                    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return None

def clean_json_string(s):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ JSON –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≤ JSON
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã: \b \f \n \r \t
    return re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', s)

def format_timestamp(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS"""
    minutes = int(seconds // 60)
    seconds = int(seconds % 60)
    return f"{minutes:02d}:{seconds:02d}"

def analyze_content(transcript_data):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Intelligence.io"""
    try:       
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        text_with_timestamps = ""
        current_time = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        for segment in transcript_data["segments"]:
            start_time = format_timestamp(segment["start"])
            end_time = format_timestamp(segment["end"])
            text_with_timestamps += f"[{start_time} - {end_time}] {segment['text']}\n"
        
        print("\n=== –¢–µ–∫—Å—Ç —Å –º–µ—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ ===")
        print(text_with_timestamps)
        
        messages = [
            {
                "role": "system",
                "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                –í–ê–ñ–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
                {
                    "segments": [
                        {
                            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
                            "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ —Ç–µ–º—ã",
                            "start_time": "MM:SS",
                            "end_time": "MM:SS",
                            "percentage": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100
                        }
                    ]
                }
                
                –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É:
                1. –ò—Å–ø–æ–ª—å–∑—É–π –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ([MM:SS - MM:SS])
                2. –û–±—ä–µ–¥–∏–Ω—è–π –±–ª–∏–∑–∫–∏–µ –ø–æ —Å–º—ã—Å–ª—É —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç
                3. –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π:
                   - start_time –ø–µ—Ä–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã
                   - end_time –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã
                4. Percentage –≤—ã—á–∏—Å–ª—è–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
                5. –í description –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º—ã, –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
            },
            {
                "role": "user",
                "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏ –µ–≥–æ –Ω–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è start_time –∏ end_time:\n\n{text_with_timestamps}"
            }
        ]
        
        data = {
            "model": "deepseek-ai/DeepSeek-R1",
            "messages": messages,
            "temperature": 0.3,
            "max_tokens": 2000,
            "response_format": {"type": "json_object"}
        }

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {IO_API_KEY}",
            "Accept": "application/json",
            "Accept-Language": "ru"
        }

        response = requests.post(
            f"{IO_API_BASE}/chat/completions",
            headers=headers,
            json=data,
            verify=False,
            timeout=30
        )


        if response.status_code != 200:
            raise Exception(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}: {response.text}")

        result = response.json()
        content = result["choices"][0]["message"]["content"].strip()
        segments_data = json.loads(content)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        if "segments" in segments_data:
            total = sum(segment["percentage"] for segment in segments_data["segments"])
            if total != 100:
                scale = 100 / total
                for segment in segments_data["segments"]:
                    segment["percentage"] = round(segment["percentage"] * scale, 1)

        return segments_data

    except Exception as e:
        print("\n=== –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ===")
        print(traceback.format_exc())
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        raise

def visualize_segments(segments):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
    if not segments or "segments" not in segments:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        return None
        
    fig = go.Figure()
    
    y_position = 0
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']
    
    start_pos = 0
    for i, segment in enumerate(segments["segments"]):
        try:
            width = float(segment['percentage'])
            time_info = f" [{segment.get('start_time', '00:00')} - {segment.get('end_time', '00:00')}]"
            fig.add_trace(go.Bar(
                x=[width],
                y=[y_position],
                orientation='h',
                name=segment['title'],
                text=f"{segment['title']} ({width}%){time_info}",
                marker_color=colors[i % len(colors)],
                hovertext=segment['description'],
                textposition='inside',
            ))
            start_pos += width
        except (KeyError, ValueError) as e:
            st.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–µ–≥–º–µ–Ω—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            continue
    
    fig.update_layout(
        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤",
        showlegend=False,
        height=150,
        margin=dict(l=0, r=0, t=30, b=0),
        yaxis=dict(showticklabels=False),
        xaxis=dict(title="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    )
    
    return fig

def main():
    st.set_page_config(initial_sidebar_state="collapsed")
    
    st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    if 'audio_duration' not in st.session_state:
        st.session_state.audio_duration = 0
    
    model_option = st.sidebar.selectbox(
        '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Whisper:',
        ('tiny', 'base', 'small'),
        help="tiny - –±—ã—Å—Ç—Ä–∞—è (–º–µ–Ω–µ–µ —Ç–æ—á–Ω–∞—è); base - —Å—Ä–µ–¥–Ω—è—è; small - –º–µ–¥–ª–µ–Ω–Ω–∞—è (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è)"
    )
    
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    st.info("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –¥–æ 10 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=['mp3', 'wav', 'mp4'])
    
    if uploaded_file is not None:
        status_placeholder = st.empty()
        progress_bar = st.progress(0)
        
        file_size_mb = uploaded_file.size / (1024 * 1024)
        st.write(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.1f} MB")
        
        try:
            # –≠—Ç–∞–ø 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            status_placeholder.text("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
            progress_bar.progress(10)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å ASCII –∏–º–µ–Ω–µ–º
            temp_dir = tempfile.mkdtemp()
            temp_path = os.path.join(temp_dir, f"temp_input{os.path.splitext(uploaded_file.name)[1]}")
            
            with open(temp_path, 'wb') as f:
                f.write(uploaded_file.getvalue())
            
            progress_bar.progress(20)
            
            try:
                # –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
                if uploaded_file.name.endswith('.mp4'):
                    status_placeholder.text("üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...")
                    audio_path = extract_audio_from_video(temp_path)
                else:
                    status_placeholder.text("üéµ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ...")
                    audio_path = temp_path
                
                progress_bar.progress(40)
                
                # –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
                status_placeholder.text("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
                model = load_whisper_model()
                progress_bar.progress(50)
                
                # –≠—Ç–∞–ø 4: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                transcript_data = transcribe_audio(audio_path, model, status_placeholder, progress_bar)
                progress_bar.progress(70)
                
                if not transcript_data or not transcript_data["full_text"].strip():
                    status_placeholder.text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç")
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∞—É–¥–∏–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—á–∏.")
                    return
                
                st.subheader("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
                st.text_area("–¢–µ–∫—Å—Ç", transcript_data["full_text"], height=200)
                
                # –≠—Ç–∞–ø 5: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                status_placeholder.text("üß† –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...")
                progress_bar.progress(80)
                analysis = analyze_content(transcript_data)
                
                if analysis and "segments" in analysis:
                    progress_bar.progress(90)
                    
                    # –≠—Ç–∞–ø 6: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    status_placeholder.text("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
                    st.subheader("–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
                    fig = visualize_segments(analysis)
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # –≠—Ç–∞–ø 7: –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                    for segment in analysis["segments"]:
                        with st.expander(f"{segment['title']} ({segment['percentage']}%) - [{segment.get('start_time', '00:00')} - {segment.get('end_time', '00:00')}]"):
                            st.write(segment['description'])
                    
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    progress_bar.progress(100)
                    status_placeholder.text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                else:
                    status_placeholder.text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã")
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ.")
            
            finally:
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                try:
                    os.remove(temp_path)
                    if uploaded_file.name.endswith('.mp4') and 'audio_path' in locals():
                        os.remove(audio_path)
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {str(e)}")
        
        except Exception as e:
            status_placeholder.text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            st.error(traceback.format_exc())

if __name__ == "__main__":
    main() 